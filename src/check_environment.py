#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ NeuroDetekt.
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
"""

import sys
import os
from pathlib import Path

def print_header(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("\n" + "="*50)
    print(f"  {title}")
    print("="*50)

def check_version(name, module):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª—è."""
    try:
        version = getattr(module, "__version__", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        print(f"  ‚úÖ {name}: {version}")
        return True
    except Exception as e:
        print(f"  ‚ùå {name}: –û—à–∏–±–∫–∞: {e}")
        return False

def check_files(files):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    all_ok = True
    for file_path in files:
        path = Path(file_path)
        if path.exists():
            print(f"  ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            all_ok = False
    return all_ok

def check_cuda():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA."""
    try:
        import torch
        if torch.cuda.is_available():
            device_count = torch.cuda.device_count()
            devices = [torch.cuda.get_device_name(i) for i in range(device_count)]
            cuda_version = torch.version.cuda
            print(f"  ‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞, –≤–µ—Ä—Å–∏—è: {cuda_version}")
            print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_count}")
            for i, device in enumerate(devices):
                memory = torch.cuda.get_device_properties(i).total_memory / (1024**3)
                print(f"    - GPU {i}: {device}, –ø–∞–º—è—Ç—å: {memory:.2f} GB")
            return True
        else:
            print("  ‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ CPU (–º–µ–¥–ª–µ–Ω–Ω–æ).")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CUDA: {e}")
        return False

def check_numpy_pytorch_compatibility():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å NumPy –∏ PyTorch."""
    try:
        import numpy as np
        import torch
        
        numpy_version = np.__version__
        pytorch_version = torch.__version__
        
        numpy_major = int(numpy_version.split('.')[0])
        
        if numpy_major >= 2:
            print(f"  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–µ—Ä—Å–∏—è NumPy {numpy_version}")
            print(f"     PyTorch {pytorch_version} –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å NumPy 2.x.")
            print("     –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NumPy 1.x –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PyTorch.")
            print("     –í—ã–ø–æ–ª–Ω–∏—Ç–µ: conda install numpy=1.24.3")
            return False
        else:
            print(f"  ‚úÖ NumPy {numpy_version} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å PyTorch {pytorch_version}")
            return True
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def check_data_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."""
    try:
        from data_processing import load_data_splits
        print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...")
        train_data, test_data, test_val, atk = load_data_splits(
            "plaid", train_pct=1.0, ratio=1.0
        )
        if train_data and len(train_data) > 0:
            print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {len(train_data)} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            print(f"  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(test_val)} –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö, {len(atk)} –∞—Ç–∞–∫")
            return True
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è NeuroDetekt")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    python_version = sys.version.split()[0]
    print(f"Python: {python_version}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    print_header("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏")
    all_modules_ok = True
    
    try:
        import numpy as np
        all_modules_ok &= check_version("NumPy", np)
    except ImportError:
        print("  ‚ùå NumPy: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_modules_ok = False
    
    try:
        import torch
        all_modules_ok &= check_version("PyTorch", torch)
    except ImportError:
        print("  ‚ùå PyTorch: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_modules_ok = False
    
    try:
        import matplotlib
        all_modules_ok &= check_version("Matplotlib", matplotlib)
    except ImportError:
        print("  ‚ùå Matplotlib: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_modules_ok = False
    
    try:
        import sklearn
        all_modules_ok &= check_version("scikit-learn", sklearn)
    except ImportError:
        print("  ‚ùå scikit-learn: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_modules_ok = False
    
    try:
        import tqdm
        all_modules_ok &= check_version("tqdm", tqdm)
    except ImportError:
        print("  ‚ùå tqdm: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_modules_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA")
    check_cuda()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ NumPy –∏ PyTorch
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    numpy_pytorch_ok = check_numpy_pytorch_compatibility()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
    required_files = [
        "src/data_processing.py",
        "src/models.py",
        "src/training_utils.py",
        "src/train_balanced_ensemble.py"
    ]
    files_ok = check_files(required_files)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    data_ok = check_data_availability()
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    print_header("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
    if all_modules_ok and numpy_pytorch_ok and files_ok and data_ok:
        print("  ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        print("  üöÄ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("     python src/train_balanced_ensemble.py --batch_size 96 --epochs 15 --ensemble_size 3 --balance_factor 1.5")
        return 0
    else:
        print("  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–µ—à–∞—Ç—å –æ–±—É—á–µ–Ω–∏—é.")
        if not numpy_pytorch_ok:
            print("  üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–µ—Ä—Å–∏—é NumPy –∫–æ–º–∞–Ω–¥–æ–π: conda install numpy=1.24.3")
        if not all_modules_ok:
            print("  üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: conda env update -f environment.yml")
        if not files_ok:
            print("  üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
        if not data_ok:
            print("  üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 