#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è:
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
- –ê–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import warnings
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.metrics import confusion_matrix, roc_curve

warnings.filterwarnings("ignore")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use("default")
sns.set_palette("husl")


class TrainingPlotter:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è."""

    def __init__(self, save_dir="plots", dpi=150, figsize=(12, 8)):
        """
        Args:
            save_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            dpi (int): –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            figsize (tuple): –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä
        """
        self.save_dir = Path(save_dir) / "plots"  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É plots
        self.save_dir.mkdir(exist_ok=True, parents=True)
        self.dpi = dpi
        self.figsize = figsize

        print(f"üìä TrainingPlotter –≥–æ—Ç–æ–≤ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {self.save_dir})")

    def plot_training_history(
        self, history, title="–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è", save_name="training_history.png", model_type=None
    ):
        """
        –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏.

        Args:
            history (dict): –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
            save_name (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            model_type (str): –¢–∏–ø –º–æ–¥–µ–ª–∏ ('lstm', 'autoencoder', None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
        """
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if model_type is None:
            model_type = self._detect_model_type(history)

        print(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {model_type.upper()} –º–æ–¥–µ–ª–∏...")

        if model_type == "autoencoder":
            return self._plot_autoencoder_history(history, title, save_name)
        elif model_type == "lstm":
            return self._plot_lstm_history(history, title, save_name)
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: {model_type}, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return self._plot_generic_history(history, title, save_name)

    def _detect_model_type(self, history):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–æ–¥–µ–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏—Å—Ç–æ—Ä–∏–∏."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞ –∫–ª—é—á–µ–π
        autoencoder_keys = ["val_mean_errors", "val_std_errors", "val_median_errors"]
        if any(key in history for key in autoencoder_keys):
            return "autoencoder"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ accuracy –º–µ—Ç—Ä–∏–∫ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è LSTM)
        lstm_keys = ["train_accs", "val_accs", "train_acc", "val_acc"]
        if any(key in history for key in lstm_keys):
            return "lstm"

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "generic"

    def _plot_autoencoder_history(self, history, title, save_name):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞."""
        fig, axes = plt.subplots(2, 2, figsize=self.figsize)
        fig.suptitle(title, fontsize=16, fontweight="bold")

        epochs = range(1, len(history["train_losses"]) + 1)

        # 1. –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å –æ–±—É—á–µ–Ω–∏—è (reconstruction loss)
        axes[0, 0].plot(epochs, history["train_losses"], "b-", label="–û–±—É—á–µ–Ω–∏–µ", linewidth=2)
        axes[0, 0].set_title("–ü–æ—Ç–µ—Ä–∏")
        axes[0, 0].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[0, 0].set_ylabel("LOSS")
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ—Ç–µ—Ä—é
        min_loss = min(history["train_losses"])
        min_epoch = history["train_losses"].index(min_loss) + 1
        axes[0, 0].scatter([min_epoch], [min_loss], color="red", s=50, zorder=5)
        axes[0, 0].annotate(
            f"Min: {min_loss:.4f}",
            xy=(min_epoch, min_loss),
            xytext=(10, 10),
            textcoords="offset points",
            fontsize=9,
            bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7),
        )

        # 2. –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞)
        if "val_mean_errors" in history and history["val_mean_errors"]:
            val_epochs = range(1, len(history["val_mean_errors"]) + 1)
            mean_errors = history["val_mean_errors"]

            axes[0, 1].plot(val_epochs, mean_errors, "g-", label="–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞", linewidth=2.5)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if "val_std_errors" in history and history["val_std_errors"]:
                std_errors = history["val_std_errors"]
                axes[0, 1].fill_between(
                    val_epochs,
                    np.array(mean_errors) - np.array(std_errors),
                    np.array(mean_errors) + np.array(std_errors),
                    alpha=0.3,
                    color="green",
                    label="¬±œÉ",
                )

            axes[0, 1].set_title("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            axes[0, 1].set_xlabel("–≠–ø–æ—Ö–∞")
            axes[0, 1].set_ylabel("–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
            axes[0, 1].legend()
            axes[0, 1].grid(True, alpha=0.3)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à—É—é —ç–ø–æ—Ö—É
            min_val_error = min(mean_errors)
            min_val_epoch = mean_errors.index(min_val_error) + 1
            axes[0, 1].scatter([min_val_epoch], [min_val_error], color="red", s=50, zorder=5)
            axes[0, 1].annotate(
                f"Best: {min_val_error:.4f}",
                xy=(min_val_epoch, min_val_error),
                xytext=(10, -20),
                textcoords="offset points",
                fontsize=9,
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen", alpha=0.7),
            )
        else:
            axes[0, 1].text(
                0.5,
                0.5,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                transform=axes[0, 1].transAxes,
                ha="center",
                va="center",
            )
            axes[0, 1].set_title("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

        # 3. –í—Ä–µ–º—è –Ω–∞ —ç–ø–æ—Ö—É
        if "epoch_times" in history and history["epoch_times"]:
            epoch_times = history["epoch_times"]
            axes[1, 0].plot(epochs, epoch_times, "purple", linewidth=2, marker="o", markersize=4)
            axes[1, 0].set_title("–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —ç–ø–æ—Ö—É")
            axes[1, 0].set_xlabel("–≠–ø–æ—Ö–∞")
            axes[1, 0].set_ylabel("–í—Ä–µ–º—è (—Å–µ–∫)")
            axes[1, 0].grid(True, alpha=0.3)

            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
            avg_time = np.mean(epoch_times)
            axes[1, 0].axhline(
                avg_time, color="red", linestyle="--", alpha=0.7, label=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_time:.1f}—Å"
            )
            axes[1, 0].legend()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
            total_time = sum(epoch_times)
            axes[1, 0].text(
                0.02,
                0.98,
                f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å",
                transform=axes[1, 0].transAxes,
                fontsize=9,
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7),
                verticalalignment="top",
            )
        else:
            axes[1, 0].text(
                0.5,
                0.5,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏",
                transform=axes[1, 0].transAxes,
                ha="center",
                va="center",
            )
            axes[1, 0].set_title("–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —ç–ø–æ—Ö—É")

        # 4. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞
        axes[1, 1].axis("off")
        stats_text = self._generate_autoencoder_stats(history)
        axes[1, 1].text(
            0.05,
            0.95,
            stats_text,
            transform=axes[1, 1].transAxes,
            fontsize=10,
            verticalalignment="top",
            fontfamily="monospace",
            bbox=dict(boxstyle="round,pad=0.5", facecolor="lightyellow", alpha=0.8),
        )

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –ì—Ä–∞—Ñ–∏–∫ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        return str(save_path)

    def _plot_lstm_history(self, history, title, save_name):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è LSTM."""
        fig, axes = plt.subplots(2, 2, figsize=self.figsize)
        fig.suptitle(title, fontsize=16, fontweight="bold")

        epochs = range(1, len(history["train_losses"]) + 1)

        # 1. –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å
        axes[0, 0].plot(epochs, history["train_losses"], "b-", label="–û–±—É—á–µ–Ω–∏–µ", linewidth=2)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
        val_losses_key = "val_losses" if "val_losses" in history else "val_loss"
        if val_losses_key in history and history[val_losses_key]:
            val_epochs = range(1, len(history[val_losses_key]) + 1)
            axes[0, 0].plot(
                val_epochs, history[val_losses_key], "r-", label="–í–∞–ª–∏–¥–∞—Ü–∏—è", linewidth=2
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à—É—é —ç–ø–æ—Ö—É
            min_val_loss = min(history[val_losses_key])
            min_val_epoch = history[val_losses_key].index(min_val_loss) + 1
            axes[0, 0].scatter([min_val_epoch], [min_val_loss], color="gold", s=60, zorder=5)
            axes[0, 0].annotate(
                f"Best: {min_val_loss:.4f}",
                xy=(min_val_epoch, min_val_loss),
                xytext=(10, 10),
                textcoords="offset points",
                fontsize=9,
                bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7),
            )

        axes[0, 0].set_title("–ü–æ—Ç–µ—Ä–∏")
        axes[0, 0].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[0, 0].set_ylabel("Loss")
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)

        # 2. –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
        train_accs_key = "train_accs" if "train_accs" in history else "train_acc"
        val_accs_key = "val_accs" if "val_accs" in history else "val_acc"

        if train_accs_key in history and history[train_accs_key]:
            axes[0, 1].plot(epochs, history[train_accs_key], "b-", label="–û–±—É—á–µ–Ω–∏–µ", linewidth=2)

            if val_accs_key in history and history[val_accs_key]:
                val_epochs = range(1, len(history[val_accs_key]) + 1)
                axes[0, 1].plot(
                    val_epochs, history[val_accs_key], "r-", label="–í–∞–ª–∏–¥–∞—Ü–∏—è", linewidth=2
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
                max_val_acc = max(history[val_accs_key])
                max_val_epoch = history[val_accs_key].index(max_val_acc) + 1
                axes[0, 1].scatter([max_val_epoch], [max_val_acc], color="gold", s=60, zorder=5)
                axes[0, 1].annotate(
                    f"Best: {max_val_acc:.3f}",
                    xy=(max_val_epoch, max_val_acc),
                    xytext=(10, -20),
                    textcoords="offset points",
                    fontsize=9,
                    bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen", alpha=0.7),
                )

            axes[0, 1].set_title("–¢–æ—á–Ω–æ—Å—Ç—å")
            axes[0, 1].set_xlabel("–≠–ø–æ—Ö–∞")
            axes[0, 1].set_ylabel("Accuracy")
            axes[0, 1].legend()
            axes[0, 1].grid(True, alpha=0.3)
            axes[0, 1].set_ylim(0, 1.05)  # –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è accuracy
        else:
            axes[0, 1].text(
                0.5,
                0.5,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–Ω–æ—Å—Ç–∏",
                transform=axes[0, 1].transAxes,
                ha="center",
                va="center",
            )
            axes[0, 1].set_title("–¢–æ—á–Ω–æ—Å—Ç—å")

        # 3. –í—Ä–µ–º—è –Ω–∞ —ç–ø–æ—Ö—É
        if "epoch_times" in history and history["epoch_times"]:
            epoch_times = history["epoch_times"]
            axes[1, 0].plot(epochs, epoch_times, "green", linewidth=2, marker="o", markersize=4)
            axes[1, 0].set_title("–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —ç–ø–æ—Ö—É")
            axes[1, 0].set_xlabel("–≠–ø–æ—Ö–∞")
            axes[1, 0].set_ylabel("–í—Ä–µ–º—è (—Å–µ–∫)")
            axes[1, 0].grid(True, alpha=0.3)

            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
            avg_time = np.mean(epoch_times)
            axes[1, 0].axhline(
                avg_time, color="red", linestyle="--", alpha=0.7, label=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_time:.1f}—Å"
            )
            axes[1, 0].legend()
        else:
            axes[1, 0].text(
                0.5,
                0.5,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏",
                transform=axes[1, 0].transAxes,
                ha="center",
                va="center",
            )
            axes[1, 0].set_title("–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —ç–ø–æ—Ö—É")

        # 4. Learning Rate –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if "learning_rates" in history and history["learning_rates"]:
            axes[1, 1].plot(epochs, history["learning_rates"], "m-", linewidth=2)
            axes[1, 1].set_title("Learning Rate")
            axes[1, 1].set_xlabel("–≠–ø–æ—Ö–∞")
            axes[1, 1].set_ylabel("LR")
            axes[1, 1].set_yscale("log")
            axes[1, 1].grid(True, alpha=0.3)
        else:
            axes[1, 1].axis("off")
            stats_text = self._generate_lstm_stats(history)
            axes[1, 1].text(
                0.05,
                0.95,
                stats_text,
                transform=axes[1, 1].transAxes,
                fontsize=10,
                verticalalignment="top",
                fontfamily="monospace",
                bbox=dict(boxstyle="round,pad=0.5", facecolor="lightcyan", alpha=0.8),
            )

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –ì—Ä–∞—Ñ–∏–∫ LSTM —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        return str(save_path)

    def _plot_generic_history(self, history, title, save_name):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏."""
        fig, axes = plt.subplots(2, 2, figsize=self.figsize)
        fig.suptitle(title, fontsize=16, fontweight="bold")

        epochs = range(1, len(history["train_losses"]) + 1)

        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å
        axes[0, 0].plot(epochs, history["train_losses"], "b-", label="–û–±—É—á–µ–Ω–∏–µ", linewidth=2)
        if "val_losses" in history and history["val_losses"]:
            val_epochs = range(1, len(history["val_losses"]) + 1)
            axes[0, 0].plot(val_epochs, history["val_losses"], "r-", label="–í–∞–ª–∏–¥–∞—Ü–∏—è", linewidth=2)
        axes[0, 0].set_title("–ü–æ—Ç–µ—Ä–∏")
        axes[0, 0].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[0, 0].set_ylabel("Loss")
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ - –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        for i in range(3):
            row, col = divmod(i + 1, 2)
            axes[row, col].text(
                0.5,
                0.5,
                "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                transform=axes[row, col].transAxes,
                ha="center",
                va="center",
            )

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –ë–∞–∑–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        return str(save_path)

    def _generate_autoencoder_stats(self, history):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞."""
        stats = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–í–¢–û–≠–ù–ö–û–î–ï–†–ê\n"
        stats += "‚îÄ" * 30 + "\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if "train_losses" in history:
            final_loss = history["train_losses"][-1]
            min_loss = min(history["train_losses"])
            stats += f"üî∏ –§–∏–Ω–∞–ª—å–Ω—ã–π Loss: {final_loss:.4f}\n"
            stats += f"üî∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Loss: {min_loss:.4f}\n"

        # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        if "val_mean_errors" in history and history["val_mean_errors"]:
            final_val_error = history["val_mean_errors"][-1]
            min_val_error = min(history["val_mean_errors"])
            best_epoch = history["val_mean_errors"].index(min_val_error) + 1
            stats += f"üî∏ –õ—É—á—à–∞—è —ç–ø–æ—Ö–∞: {best_epoch}\n"
            stats += f"üî∏ –õ—É—á—à–∞—è –≤–∞–ª. –æ—à–∏–±–∫–∞: {min_val_error:.4f}\n"
            stats += f"üî∏ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª. –æ—à–∏–±–∫–∞: {final_val_error:.4f}\n"

        # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        if "epoch_times" in history and history["epoch_times"]:
            total_time = sum(history["epoch_times"])
            avg_time = np.mean(history["epoch_times"])
            stats += f"\n‚è±Ô∏è –í–†–ï–ú–Ø:\n"
            stats += f"üî∏ –û–±—â–µ–µ: {total_time:.1f}—Å\n"
            stats += f"üî∏ –°—Ä–µ–¥–Ω–µ–µ/—ç–ø–æ—Ö–∞: {avg_time:.1f}—Å\n"

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        epochs_count = len(history.get("train_losses", []))
        stats += f"\nüìà –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–æ: {epochs_count}\n"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if "val_std_errors" in history and history["val_std_errors"]:
            final_std = history["val_std_errors"][-1]
            stats += f"üî∏ –°—Ç–∞–Ω–¥. –æ—Ç–∫–ª. (—Ñ–∏–Ω.): {final_std:.4f}\n"

        return stats

    def _generate_lstm_stats(self, history):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è LSTM."""
        stats = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê LSTM\n"
        stats += "‚îÄ" * 25 + "\n\n"

        # Loss –º–µ—Ç—Ä–∏–∫–∏
        if "train_losses" in history:
            final_train_loss = history["train_losses"][-1]
            stats += f"üî∏ Final Train Loss: {final_train_loss:.4f}\n"

        val_losses_key = "val_losses" if "val_losses" in history else "val_loss"
        if val_losses_key in history and history[val_losses_key]:
            final_val_loss = history[val_losses_key][-1]
            min_val_loss = min(history[val_losses_key])
            best_epoch = history[val_losses_key].index(min_val_loss) + 1
            stats += f"üî∏ Final Val Loss: {final_val_loss:.4f}\n"
            stats += f"üî∏ Best Val Loss: {min_val_loss:.4f}\n"
            stats += f"üî∏ –õ—É—á—à–∞—è —ç–ø–æ—Ö–∞: {best_epoch}\n"

        # Accuracy –º–µ—Ç—Ä–∏–∫–∏
        train_accs_key = "train_accs" if "train_accs" in history else "train_acc"
        val_accs_key = "val_accs" if "val_accs" in history else "val_acc"

        if train_accs_key in history and history[train_accs_key]:
            final_train_acc = history[train_accs_key][-1]
            stats += f"üî∏ Final Train Acc: {final_train_acc:.3f}\n"

        if val_accs_key in history and history[val_accs_key]:
            final_val_acc = history[val_accs_key][-1]
            max_val_acc = max(history[val_accs_key])
            stats += f"üî∏ Final Val Acc: {final_val_acc:.3f}\n"
            stats += f"üî∏ Best Val Acc: {max_val_acc:.3f}\n"

        # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        if "epoch_times" in history and history["epoch_times"]:
            total_time = sum(history["epoch_times"])
            avg_time = np.mean(history["epoch_times"])
            stats += f"\n‚è±Ô∏è –í–†–ï–ú–Ø:\n"
            stats += f"üî∏ –û–±—â–µ–µ: {total_time:.1f}—Å\n"
            stats += f"üî∏ –°—Ä–µ–¥–Ω–µ–µ/—ç–ø–æ—Ö–∞: {avg_time:.1f}—Å\n"

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        epochs_count = len(history.get("train_losses", []))
        stats += f"\nüìà –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–æ: {epochs_count}"

        return stats


class ResultsPlotter:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def __init__(self, save_dir="plots", dpi=150, figsize=(12, 8)):
        self.save_dir = Path(save_dir) / "plots"  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É plots
        self.save_dir.mkdir(exist_ok=True, parents=True)
        self.dpi = dpi
        self.figsize = figsize

        print(f"üìä ResultsPlotter –≥–æ—Ç–æ–≤")

    def plot_score_distributions(
        self,
        normal_scores,
        attack_scores,
        threshold=None,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫",
        save_name="score_distributions.png",
    ):
        """
        –°—Ç—Ä–æ–∏—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞—Ç–∞–∫.

        Args:
            normal_scores (array): –û—Ü–µ–Ω–∫–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            attack_scores (array): –û—Ü–µ–Ω–∫–∏ –¥–ª—è –∞—Ç–∞–∫
            threshold (float): –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫
            save_name (str): –ò–º—è —Ñ–∞–π–ª–∞
        """
        fig, axes = plt.subplots(2, 2, figsize=self.figsize)
        fig.suptitle(title, fontsize=16, fontweight="bold")

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        axes[0, 0].hist(
            normal_scores,
            bins=50,
            alpha=0.7,
            color="green",
            label=f"–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ (n={len(normal_scores)})",
        )
        axes[0, 0].hist(
            attack_scores, bins=50, alpha=0.7, color="red", label=f"–ê—Ç–∞–∫–∏ (n={len(attack_scores)})"
        )
        if threshold is not None:
            axes[0, 0].axvline(
                threshold,
                color="black",
                linestyle="--",
                linewidth=2,
                label=f"–ü–æ—Ä–æ–≥: {threshold:.4f}",
            )
        axes[0, 0].set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫")
        axes[0, 0].set_xlabel("–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏")
        axes[0, 0].set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)

        # Box plot
        data_for_box = [normal_scores, attack_scores]
        axes[0, 1].boxplot(data_for_box, labels=["–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ", "–ê—Ç–∞–∫–∏"])
        if threshold is not None:
            axes[0, 1].axhline(threshold, color="black", linestyle="--", linewidth=2)
        axes[0, 1].set_title("Box Plot –æ—Ü–µ–Ω–æ–∫")
        axes[0, 1].set_ylabel("–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏")
        axes[0, 1].grid(True, alpha=0.3)

        # Violin plot
        df = pd.DataFrame(
            {
                "–û—Ü–µ–Ω–∫–∞": np.concatenate([normal_scores, attack_scores]),
                "–¢–∏–ø": ["–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ"] * len(normal_scores) + ["–ê—Ç–∞–∫–∏"] * len(attack_scores),
            }
        )
        sns.violinplot(data=df, x="–¢–∏–ø", y="–û—Ü–µ–Ω–∫–∞", ax=axes[1, 0])
        if threshold is not None:
            axes[1, 0].axhline(threshold, color="black", linestyle="--", linewidth=2)
        axes[1, 0].set_title("Violin Plot")
        axes[1, 0].grid(True, alpha=0.3)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        axes[1, 1].axis("off")
        stats_text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫:

–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {np.mean(normal_scores):.4f}
‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {np.median(normal_scores):.4f}
‚Ä¢ –°—Ç. –æ—Ç–∫–ª.: {np.std(normal_scores):.4f}
‚Ä¢ –ú–∏–Ω-–ú–∞–∫—Å: {np.min(normal_scores):.4f} - {np.max(normal_scores):.4f}

–ê—Ç–∞–∫–∏:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {np.mean(attack_scores):.4f}
‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {np.median(attack_scores):.4f}
‚Ä¢ –°—Ç. –æ—Ç–∫–ª.: {np.std(attack_scores):.4f}
‚Ä¢ –ú–∏–Ω-–ú–∞–∫—Å: {np.min(attack_scores):.4f} - {np.max(attack_scores):.4f}

–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {np.mean(attack_scores) - np.mean(normal_scores):.4f}
"""
        if threshold is not None:
            stats_text += f"\n–ü–æ—Ä–æ–≥: {threshold:.4f}"

        axes[1, 1].text(
            0.05,
            0.95,
            stats_text,
            transform=axes[1, 1].transAxes,
            fontsize=10,
            verticalalignment="top",
            fontfamily="monospace",
        )

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        return str(save_path)

    def plot_roc_curve(self, y_true, y_scores, title="ROC –∫—Ä–∏–≤–∞—è", save_name="roc_curve.png"):
        """–°—Ç—Ä–æ–∏—Ç ROC –∫—Ä–∏–≤—É—é."""
        from sklearn.metrics import auc, roc_curve

        fpr, tpr, thresholds = roc_curve(y_true, y_scores)
        roc_auc = auc(fpr, tpr)

        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        fig.suptitle(title, fontsize=16, fontweight="bold")

        # ROC –∫—Ä–∏–≤–∞—è
        axes[0].plot(
            fpr, tpr, color="darkorange", linewidth=3, label=f"ROC –∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.4f})"
        )
        axes[0].plot(
            [0, 1],
            [0, 1],
            color="navy",
            linewidth=2,
            linestyle="--",
            label="–°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
        )
        axes[0].fill_between(fpr, tpr, alpha=0.2, color="darkorange")
        axes[0].set_xlim([0.0, 1.0])
        axes[0].set_ylim([0.0, 1.05])
        axes[0].set_xlabel("False Positive Rate (FPR)")
        axes[0].set_ylabel("True Positive Rate (TPR)")
        axes[0].set_title("ROC –ö—Ä–∏–≤–∞—è")
        axes[0].legend(loc="lower right")
        axes[0].grid(True, alpha=0.3)

        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ä–æ–≥–æ–≤
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ (–º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º TPR - FPR)
        optimal_idx = np.argmax(tpr - fpr)
        optimal_threshold = thresholds[optimal_idx]
        optimal_fpr = fpr[optimal_idx]
        optimal_tpr = tpr[optimal_idx]

        axes[0].plot(
            optimal_fpr,
            optimal_tpr,
            "ro",
            markersize=8,
            label=f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ = {optimal_threshold:.4f}",
        )
        axes[0].legend(loc="lower right")

        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ –æ—Ç –ø–æ—Ä–æ–≥–∞
        j_scores = tpr - fpr  # Youden's J statistic
        axes[1].plot(thresholds, tpr, "b-", label="True Positive Rate", linewidth=2)
        axes[1].plot(thresholds, fpr, "r-", label="False Positive Rate", linewidth=2)
        axes[1].plot(thresholds, j_scores, "g-", label="Youden's J (TPR-FPR)", linewidth=2)
        axes[1].axvline(
            optimal_threshold,
            color="black",
            linestyle="--",
            label=f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {optimal_threshold:.4f}",
        )
        axes[1].set_xlabel("–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        axes[1].set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
        axes[1].set_title("–ú–µ—Ç—Ä–∏–∫–∏ vs –ü–æ—Ä–æ–≥")
        axes[1].legend()
        axes[1].grid(True, alpha=0.3)
        axes[1].set_xlim([0, 1])
        axes[1].set_ylim([0, 1])

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ ROC –∫—Ä–∏–≤–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
        print(f"üìä ROC-AUC: {roc_auc:.4f}")
        print(
            f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {optimal_threshold:.4f} (TPR={optimal_tpr:.3f}, FPR={optimal_fpr:.3f})"
        )

        return {
            "auc": roc_auc,
            "optimal_threshold": optimal_threshold,
            "optimal_tpr": optimal_tpr,
            "optimal_fpr": optimal_fpr,
            "fpr": fpr,
            "tpr": tpr,
            "thresholds": thresholds,
        }

    def plot_precision_recall_curve(
        self,
        y_true,
        y_scores,
        title="Precision-Recall –∫—Ä–∏–≤–∞—è",
        save_name="precision_recall_curve.png",
    ):
        """–°—Ç—Ä–æ–∏—Ç Precision-Recall –∫—Ä–∏–≤—É—é."""
        from sklearn.metrics import average_precision_score, precision_recall_curve

        precision, recall, thresholds = precision_recall_curve(y_true, y_scores)
        ap_score = average_precision_score(y_true, y_scores)

        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        fig.suptitle(title, fontsize=16, fontweight="bold")

        # PR –∫—Ä–∏–≤–∞—è
        axes[0].plot(
            recall, precision, color="blue", linewidth=3, label=f"PR –∫—Ä–∏–≤–∞—è (AP = {ap_score:.4f})"
        )
        axes[0].fill_between(recall, precision, alpha=0.2, color="blue")

        # Baseline (—Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
        baseline = np.sum(y_true) / len(y_true)
        axes[0].axhline(
            baseline,
            color="red",
            linestyle="--",
            linewidth=2,
            label=f"Baseline (random): {baseline:.4f}",
        )

        axes[0].set_xlim([0.0, 1.0])
        axes[0].set_ylim([0.0, 1.05])
        axes[0].set_xlabel("Recall (True Positive Rate)")
        axes[0].set_ylabel("Precision")
        axes[0].set_title("Precision-Recall –ö—Ä–∏–≤–∞—è")
        axes[0].legend()
        axes[0].grid(True, alpha=0.3)

        # F1-score vs threshold
        if len(thresholds) > 0:
            f1_scores = 2 * (precision[:-1] * recall[:-1]) / (precision[:-1] + recall[:-1])
            f1_scores = np.nan_to_num(f1_scores)

            best_f1_idx = np.argmax(f1_scores)
            best_threshold = thresholds[best_f1_idx]
            best_f1 = f1_scores[best_f1_idx]

            axes[1].plot(thresholds, f1_scores, "g-", linewidth=2, label="F1-Score")
            axes[1].plot(thresholds, precision[:-1], "b-", linewidth=2, label="Precision")
            axes[1].plot(thresholds, recall[:-1], "r-", linewidth=2, label="Recall")
            axes[1].axvline(
                best_threshold,
                color="black",
                linestyle="--",
                label=f"–õ—É—á—à–∏–π F1 –ø–æ—Ä–æ–≥: {best_threshold:.4f}",
            )
            axes[1].set_xlabel("–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            axes[1].set_ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
            axes[1].set_title(f"–ú–µ—Ç—Ä–∏–∫–∏ vs –ü–æ—Ä–æ–≥ (–º–∞–∫—Å F1={best_f1:.3f})")
            axes[1].legend()
            axes[1].grid(True, alpha=0.3)
            axes[1].set_xlim([0, 1])
            axes[1].set_ylim([0, 1])

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ PR –∫—Ä–∏–≤–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
        print(f"üìä Average Precision: {ap_score:.4f}")

        return {
            "average_precision": ap_score,
            "precision": precision,
            "recall": recall,
            "thresholds": thresholds,
        }

    def create_comprehensive_analysis(
        self,
        y_true,
        y_scores,
        y_pred=None,
        threshold=None,
        title="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        save_name="comprehensive_analysis.png",
    ):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        from sklearn.metrics import classification_report, confusion_matrix

        if y_pred is None and threshold is not None:
            y_pred = (y_scores >= threshold).astype(int)

        fig = plt.figure(figsize=(20, 12))

        # 1. ROC –∫—Ä–∏–≤–∞—è
        plt.subplot(2, 4, 1)
        roc_data = self.plot_roc_curve(y_true, y_scores, save_name="temp_roc.png")

        # 2. Precision-Recall –∫—Ä–∏–≤–∞—è
        plt.subplot(2, 4, 2)
        pr_data = self.plot_precision_recall_curve(y_true, y_scores, save_name="temp_pr.png")

        # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        plt.subplot(2, 4, 3)
        normal_scores = y_scores[y_true == 0]
        attack_scores = y_scores[y_true == 1]

        plt.hist(
            normal_scores,
            bins=50,
            alpha=0.7,
            color="green",
            label=f"–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ (n={len(normal_scores)})",
            density=True,
        )
        plt.hist(
            attack_scores,
            bins=50,
            alpha=0.7,
            color="red",
            label=f"–ê—Ç–∞–∫–∏ (n={len(attack_scores)})",
            density=True,
        )
        if threshold is not None:
            plt.axvline(
                threshold,
                color="black",
                linestyle="--",
                linewidth=2,
                label=f"–ü–æ—Ä–æ–≥: {threshold:.4f}",
            )
        plt.xlabel("–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏")
        plt.ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫")
        plt.legend()
        plt.grid(True, alpha=0.3)

        # 4. Confusion Matrix
        if y_pred is not None:
            plt.subplot(2, 4, 4)
            cm = confusion_matrix(y_true, y_pred)
            sns.heatmap(
                cm,
                annot=True,
                fmt="d",
                cmap="Blues",
                xticklabels=["–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ", "–ê—Ç–∞–∫–∏"],
                yticklabels=["–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ", "–ê—Ç–∞–∫–∏"],
            )
            plt.title("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
            plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ")
            plt.ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–µ")

        # 5-8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
        if y_pred is not None:
            plt.subplot(2, 4, (5, 8))
            plt.axis("off")

            report = classification_report(
                y_true, y_pred, target_names=["–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ", "–ê—Ç–∞–∫–∏"], output_dict=True
            )

            stats_text = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò

üéØ ROC-AUC –ú–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ AUC Score: {roc_data['auc']:.4f}
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {roc_data['optimal_threshold']:.4f}
‚Ä¢ TPR –Ω–∞ –æ–ø—Ç. –ø–æ—Ä–æ–≥–µ: {roc_data['optimal_tpr']:.3f}
‚Ä¢ FPR –Ω–∞ –æ–ø—Ç. –ø–æ—Ä–æ–≥–µ: {roc_data['optimal_fpr']:.3f}

üìà Precision-Recall:
‚Ä¢ Average Precision: {pr_data['average_precision']:.4f}

üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø–æ—Ä–æ–≥ = {threshold:.4f}):
‚Ä¢ Accuracy: {report['accuracy']:.4f}
‚Ä¢ Macro F1: {report['macro avg']['f1-score']:.4f}
‚Ä¢ Weighted F1: {report['weighted avg']['f1-score']:.4f}

üìã –ü–æ –∫–ª–∞—Å—Å–∞–º:
–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ:
  ‚Ä¢ Precision: {report['–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ']['precision']:.4f}
  ‚Ä¢ Recall: {report['–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ']['recall']:.4f}
  ‚Ä¢ F1-Score: {report['–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ']['f1-score']:.4f}

–ê—Ç–∞–∫–∏:
  ‚Ä¢ Precision: {report['–ê—Ç–∞–∫–∏']['precision']:.4f}
  ‚Ä¢ Recall: {report['–ê—Ç–∞–∫–∏']['recall']:.4f}
  ‚Ä¢ F1-Score: {report['–ê—Ç–∞–∫–∏']['f1-score']:.4f}

üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ: {len(normal_scores)} ({len(normal_scores)/len(y_true)*100:.1f}%)
‚Ä¢ –ê—Ç–∞–∫–∏: {len(attack_scores)} ({len(attack_scores)/len(y_true)*100:.1f}%)

üí° –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ (–Ω–æ—Ä–º): {np.mean(normal_scores):.4f}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ (–∞—Ç–∞–∫–∏): {np.mean(attack_scores):.4f}
‚Ä¢ –†–∞–∑–Ω–æ—Å—Ç—å: {np.mean(attack_scores) - np.mean(normal_scores):.4f}
"""

            plt.text(
                0.05,
                0.95,
                stats_text,
                transform=plt.gca().transAxes,
                fontsize=10,
                verticalalignment="top",
                fontfamily="monospace",
            )

        plt.suptitle(title, fontsize=18, fontweight="bold", y=0.98)
        plt.tight_layout()
        plt.subplots_adjust(top=0.94)

        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")

        return {
            "roc_data": roc_data,
            "pr_data": pr_data,
            "classification_report": report if y_pred is not None else None,
        }


class ComparisonPlotter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""

    def __init__(self, save_dir="plots", dpi=150, figsize=(12, 8)):
        self.save_dir = Path(save_dir) / "plots"  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É plots
        self.save_dir.mkdir(exist_ok=True, parents=True)
        self.dpi = dpi
        self.figsize = figsize

        print(f"üìä ComparisonPlotter –≥–æ—Ç–æ–≤")

    def plot_metrics_comparison(
        self, results_dict, title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", save_name="models_comparison.png"
    ):
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

        Args:
            results_dict (dict): –°–ª–æ–≤–∞—Ä—å {model_name: {'accuracy': val, 'precision': val, ...}}
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫
            save_name (str): –ò–º—è —Ñ–∞–π–ª–∞
        """
        metrics = ["accuracy", "precision", "recall", "f1_score"]
        model_names = list(results_dict.keys())

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = []
        for model_name in model_names:
            for metric in metrics:
                if metric in results_dict[model_name]:
                    data.append(
                        {
                            "–ú–æ–¥–µ–ª—å": model_name,
                            "–ú–µ—Ç—Ä–∏–∫–∞": metric.title(),
                            "–ó–Ω–∞—á–µ–Ω–∏–µ": results_dict[model_name][metric],
                        }
                    )

        df = pd.DataFrame(data)

        # –ì—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=self.figsize)
        sns.barplot(data=df, x="–ú–µ—Ç—Ä–∏–∫–∞", y="–ó–Ω–∞—á–µ–Ω–∏–µ", hue="–ú–æ–¥–µ–ª—å")
        plt.title(title, fontsize=16, fontweight="bold")
        plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
        plt.ylim(0, 1)
        plt.legend(title="–ú–æ–¥–µ–ª—å", bbox_to_anchor=(1.05, 1), loc="upper left")
        plt.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for container in plt.gca().containers:
            plt.gca().bar_label(container, fmt="%.3f", rotation=90, padding=3)

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
        return str(save_path)

    def plot_training_comparison(
        self, histories_dict, title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è", save_name="training_comparison.png"
    ):
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

        Args:
            histories_dict (dict): –°–ª–æ–≤–∞—Ä—å {model_name: history}
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫
            save_name (str): –ò–º—è —Ñ–∞–π–ª–∞
        """
        fig, axes = plt.subplots(2, 2, figsize=self.figsize)
        fig.suptitle(title, fontsize=16, fontweight="bold")

        colors = plt.cm.tab10(np.linspace(0, 1, len(histories_dict)))

        for i, (model_name, history) in enumerate(histories_dict.items()):
            color = colors[i]

            # Train losses
            if "train_losses" in history:
                epochs = range(1, len(history["train_losses"]) + 1)
                axes[0, 0].plot(
                    epochs, history["train_losses"], color=color, label=f"{model_name}", linewidth=2
                )

            # Val losses
            if "val_losses" in history and history["val_losses"]:
                val_epochs = range(1, len(history["val_losses"]) + 1)
                axes[0, 1].plot(
                    val_epochs,
                    history["val_losses"],
                    color=color,
                    label=f"{model_name}",
                    linewidth=2,
                )

            # Train accuracy
            if "train_accs" in history and history["train_accs"]:
                epochs = range(1, len(history["train_accs"]) + 1)
                axes[1, 0].plot(
                    epochs, history["train_accs"], color=color, label=f"{model_name}", linewidth=2
                )

            # Val accuracy
            if "val_accs" in history and history["val_accs"]:
                val_epochs = range(1, len(history["val_accs"]) + 1)
                axes[1, 1].plot(
                    val_epochs, history["val_accs"], color=color, label=f"{model_name}", linewidth=2
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        axes[0, 0].set_title("Train Loss")
        axes[0, 0].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[0, 0].set_ylabel("Loss")
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)

        axes[0, 1].set_title("Validation Loss")
        axes[0, 1].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[0, 1].set_ylabel("Loss")
        axes[0, 1].legend()
        axes[0, 1].grid(True, alpha=0.3)

        axes[1, 0].set_title("Train Accuracy")
        axes[1, 0].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[1, 0].set_ylabel("Accuracy")
        axes[1, 0].legend()
        axes[1, 0].grid(True, alpha=0.3)

        axes[1, 1].set_title("Validation Accuracy")
        axes[1, 1].set_xlabel("–≠–ø–æ—Ö–∞")
        axes[1, 1].set_ylabel("Accuracy")
        axes[1, 1].legend()
        axes[1, 1].grid(True, alpha=0.3)

        plt.tight_layout()
        save_path = self.save_dir / save_name
        plt.savefig(save_path, dpi=self.dpi, bbox_inches="tight")
        plt.close()

        print(f"üíæ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
        return str(save_path)


def create_summary_report(results, output_path="results_summary.html"):
    """–°–æ–∑–¥–∞–µ—Ç HTML –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>NeuroDetekt - –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
            .metrics {{ background-color: #e8f5e8; padding: 15px; margin: 10px 0; border-radius: 5px; }}
            .warning {{ background-color: #fff3cd; padding: 15px; margin: 10px 0; border-radius: 5px; }}
            table {{ border-collapse: collapse; width: 100%; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üß† NeuroDetekt - –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</p>
        </div>
        
        <h2>üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>
        <div class="metrics">
            <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...</p>
        </div>
    </body>
    </html>
    """

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(html_content)

    print(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
