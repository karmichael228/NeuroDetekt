#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

–°–æ–¥–µ—Ä–∂–∏—Ç:
- TimeTracker: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —ç–ø–æ—Ö
- LossTracker: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –∏ –º–µ—Ç—Ä–∏–∫
- EarlyStopping: —Ä–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import time
import numpy as np
import torch
from pathlib import Path


class TimeTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–ø–æ—Ö."""
    
    def __init__(self):
        self.times = []
        self.current_time = 0
    
    def start_epoch(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —ç–ø–æ—Ö–∏."""
        self.current_time = time.time()
    
    def end_epoch(self):
        """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —ç–ø–æ—Ö–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
        elapsed = time.time() - self.current_time
        self.times.append(elapsed)
        return elapsed
    
    def get_average_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —ç–ø–æ—Ö–∏."""
        return np.mean(self.times) if self.times else 0.0
    
    def get_total_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è."""
        return sum(self.times)
    
    def estimate_remaining(self, current_epoch, total_epochs):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è."""
        if not self.times:
            return 0.0
        avg_time = self.get_average_time()
        remaining_epochs = total_epochs - current_epoch
        return avg_time * remaining_epochs


class LossTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è."""
    
    def __init__(self, log_dir):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True, parents=True)
        
        self.train_losses = []
        self.val_losses = []
        self.train_accs = []
        self.val_accs = []
        self.epoch_times = []  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —ç–ø–æ—Ö
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        self.log_file = self.log_dir / "training_log.csv"
        with open(self.log_file, 'w') as f:
            f.write("epoch,train_loss,val_loss,train_acc,val_acc,time\n")
    
    def update(self, epoch, train_loss, val_loss, train_acc, val_acc, epoch_time):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —ç–ø–æ—Ö–∏."""
        self.train_losses.append(train_loss)
        self.val_losses.append(val_loss)
        self.train_accs.append(train_acc)
        self.val_accs.append(val_acc)
        self.epoch_times.append(epoch_time)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —ç–ø–æ—Ö–∏
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV —Ñ–∞–π–ª
        with open(self.log_file, 'a') as f:
            f.write(f"{epoch},{train_loss},{val_loss},{train_acc},{val_acc},{epoch_time}\n")
    
    def get_best_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        if not self.val_losses:
            return None
        
        best_val_idx = np.argmin(self.val_losses)
        return {
            'epoch': best_val_idx + 1,
            'train_loss': self.train_losses[best_val_idx],
            'val_loss': self.val_losses[best_val_idx],
            'train_acc': self.train_accs[best_val_idx],
            'val_acc': self.val_accs[best_val_idx]
        }
    
    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        history = {
            'train_losses': self.train_losses,
            'val_losses': self.val_losses,
            'train_accs': self.train_accs,
            'val_accs': self.val_accs,
            'epoch_times': self.epoch_times  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —ç–ø–æ—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é
        }
        
        import pickle
        with open(self.log_dir / "training_history.pkl", 'wb') as f:
            pickle.dump(history, f)
        
        return history


class EarlyStopping:
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—É—á–µ–Ω–∏—è."""
    
    def __init__(self, patience=7, verbose=False, delta=0, path='checkpoint.pt', 
                 restore_best_weights=True):
        """
        Args:
            patience (int): –°–∫–æ–ª—å–∫–æ —ç–ø–æ—Ö –∂–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
            verbose (bool): –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            delta (float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
            restore_best_weights (bool): –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª—É—á—à–∏–µ –≤–µ—Å–∞
        """
        self.patience = patience
        self.verbose = verbose
        self.counter = 0
        self.best_score = None
        self.early_stop = False
        self.val_loss_min = np.Inf
        self.delta = delta
        self.path = Path(path)
        self.restore_best_weights = restore_best_weights
        self.best_weights = None
    
    def __call__(self, val_loss, model):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        score = -val_loss
        
        if self.best_score is None:
            self.best_score = score
            self.save_checkpoint(val_loss, model)
        elif score < self.best_score + self.delta:
            self.counter += 1
            if self.verbose:
                print(f'   ‚è≥ EarlyStopping: {self.counter}/{self.patience}')
            if self.counter >= self.patience:
                self.early_stop = True
                if self.restore_best_weights and self.best_weights is not None:
                    model.load_state_dict(self.best_weights)
                    if self.verbose:
                        print(f'   üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –≤–µ—Å–∞ (val_loss: {self.val_loss_min:.6f})')
        else:
            self.best_score = score
            self.save_checkpoint(val_loss, model)
            self.counter = 0
    
    def save_checkpoint(self, val_loss, model):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ—Ç–µ—Ä–∏."""
        if self.verbose:
            print(f'   üíæ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è —É–ª—É—á—à–∏–ª–∞—Å—å: '
                  f'{self.val_loss_min:.6f} ‚Üí {val_loss:.6f}')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
        torch.save(model.state_dict(), self.path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –≤–µ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.restore_best_weights:
            self.best_weights = model.state_dict().copy()
        
        self.val_loss_min = val_loss
    
    def load_best_model(self, model):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å."""
        if self.path.exists():
            model.load_state_dict(torch.load(self.path, weights_only=True))
            return True
        return False


def save_model_checkpoint(model, optimizer, epoch, train_loss, val_loss, filepath):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π checkpoint –º–æ–¥–µ–ª–∏.
    
    Args:
        model: –ú–æ–¥–µ–ª—å PyTorch
        optimizer: –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        epoch (int): –ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏
        train_loss (float): –ü–æ—Ç–µ—Ä—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏
        val_loss (float): –ü–æ—Ç–µ—Ä—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        filepath (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    checkpoint = {
        'epoch': epoch,
        'model_state_dict': model.state_dict(),
        'optimizer_state_dict': optimizer.state_dict(),
        'train_loss': train_loss,
        'val_loss': val_loss,
        'timestamp': time.time()
    }
    
    torch.save(checkpoint, filepath)


def load_model_checkpoint(model, optimizer, filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç checkpoint –º–æ–¥–µ–ª–∏.
    
    Args:
        model: –ú–æ–¥–µ–ª—å PyTorch
        optimizer: –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        filepath (str): –ü—É—Ç—å –∫ checkpoint
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º checkpoint
    """
    checkpoint = torch.load(filepath, weights_only=False)
    
    model.load_state_dict(checkpoint['model_state_dict'])
    if optimizer is not None:
        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
    
    return {
        'epoch': checkpoint.get('epoch', 0),
        'train_loss': checkpoint.get('train_loss', 0.0),
        'val_loss': checkpoint.get('val_loss', 0.0),
        'timestamp': checkpoint.get('timestamp', 0.0)
    }


def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    
    Args:
        seconds (float): –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    if seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        minutes = seconds / 60
        return f"{minutes:.1f}–º"
    else:
        hours = seconds / 3600
        return f"{hours:.1f}—á"


def print_training_summary(total_time, best_metrics, final_metrics=None):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Ä–µ–∑—é–º–µ –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        total_time (float): –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        best_metrics (dict): –õ—É—á—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        final_metrics (dict, optional): –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    """
    print(f"\n{'='*60}")
    print(f"üèÅ –†–ï–ó–Æ–ú–ï –û–ë–£–ß–ï–ù–ò–Ø")
    print('='*60)
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_time(total_time)}")
    
    if best_metrics:
        print(f"üèÜ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—ç–ø–æ—Ö–∞ {best_metrics['epoch']}):")
        print(f"   üìâ Train Loss: {best_metrics['train_loss']:.6f}")
        print(f"   üìä Val Loss: {best_metrics['val_loss']:.6f}")
        print(f"   üéØ Train Acc: {best_metrics['train_acc']:.4f}")
        print(f"   ‚úÖ Val Acc: {best_metrics['val_acc']:.4f}")
    
    if final_metrics:
        print(f"\nüìà –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for key, value in final_metrics.items():
            print(f"   {key}: {value:.4f}")
    
    print('='*60) 